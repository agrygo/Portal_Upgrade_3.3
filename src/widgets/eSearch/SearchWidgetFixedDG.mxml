<?xml version="1.0" encoding="utf-8"?>
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:viewer="com.esri.viewer.*"
				   xmlns:Search="widgets.eSearch.*"
				   height="200" width="800"
				   widgetConfigLoaded="init()" verticalScrollPolicy="off">	
	
	<fx:Declarations>
		<s:Move id="panelOut" yTo="0" duration="0" startDelay="0" />
		<s:Move id="panelIn" yTo="175" duration="2000" startDelay="0" />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[ 
            import com.esri.ags.FeatureSet;
            import com.esri.ags.Graphic;
            import com.esri.ags.Map;
            import com.esri.ags.geometry.Extent;
            import com.esri.ags.geometry.Geometry;
            import com.esri.ags.geometry.MapPoint;
            import com.esri.ags.layers.FeatureLayer;
            import com.esri.ags.layers.supportClasses.CodedValue;
            import com.esri.ags.layers.supportClasses.CodedValueDomain;
            import com.esri.ags.layers.supportClasses.FeatureType;
            import com.esri.ags.layers.supportClasses.LayerDetails;
            import com.esri.ags.portal.PopUpRenderer;
            import com.esri.ags.portal.supportClasses.PopUpInfo;
            import com.esri.ags.portal.supportClasses.PopUpMediaInfo;
            import com.esri.ags.tasks.supportClasses.Query;
            import com.esri.ags.tasks.supportClasses.RelationshipQuery;
            import com.esri.ags.utils.GraphicUtil;
            import com.esri.ags.utils.StringUtil;
            import com.esri.viewer.AppEvent;
            import com.esri.viewer.ViewerContainer;
            
            import mx.collections.ArrayCollection;
            import mx.collections.ArrayList;
            import mx.collections.IViewCursor;
            import mx.controls.Alert;
            import mx.core.FlexGlobals;
            import mx.events.EffectEvent;
            import mx.events.MoveEvent;
            import mx.events.ResizeEvent;
            import mx.rpc.AsyncResponder;
            import mx.rpc.Fault;
            import mx.utils.ObjectUtil;
            
            import spark.collections.Sort;
            import spark.collections.SortField;
            import spark.components.DataGrid;
            import spark.components.gridClasses.GridColumn;
            import spark.events.GridEvent;
            import spark.formatters.CurrencyFormatter;
            import spark.formatters.DateTimeFormatter;
            import spark.formatters.NumberFormatter;
            
            import widgets.eSearch.utils.PrintProperties;
            import widgets.eSearch.utils.PrintUtil;
			
			[Bindable]
			private var appWidth:Number;
			
			private var _data:Array;
			private var _rdata:Array;
			private var _qFeatLyr:FeatureLayer;
			private var _featLayer:FeatureLayer;
			private var highlightedGraphic:Graphic;
			private var _zoomScale:Number = 5000;
			private var _zoomPercent:Number = 1.2;
			private var _bWidget:*;
			private var _dgColumns:Array=[];
			private var _dgFieldAliases:Object;
			private var _dgHyperColumns:Array=[];
			private var hitimer:uint;
			
			private var _rdgColumns:Array=[];
			private var _rdgFieldAliases:Object;
			private var _rdgHyperColumns:Array=[];
			private var rhypercols:ArrayCollection;
			private var hypercols:ArrayCollection;
			private var _csvName:String;
			private var _rcsvName:String;
			private var dateFormatter:DateTimeFormatter = new DateTimeFormatter();
			private var numFormatter:NumberFormatter = new NumberFormatter();
			private var currFormatter:CurrencyFormatter = new CurrencyFormatter();
			private var _dateFormat:String = "";
			private var _currFormat:String = "";
			private var _numFormat:String = "";
			private var _csvSep:String = ",";
			private var _layerDetails:* = null;
			private var _rlayerDetails:* = null;
            private var _rRid:Number;
            private var _rLayer:FeatureLayer;
			[Bindable] private var _exp2csvBtnLbl:String;
			[Bindable] private var _exp2txtBtnLbl:String;
			[Bindable] private var _exportButtonLbl:String;
			[Bindable] private var _enableExport:Boolean;
			[Bindable] private var _enablePrint:Boolean;
			[Bindable] private var _renablePrint:Boolean;
			[Bindable] private var sumVisible:Boolean;
			[Bindable] private var _labelSum:String;
			[Bindable] private var _hasRelates:Boolean;
			[Bindable] private var _relateTooltip:String = "Show Relates";
			[Bindable] private var _relateIcon:String = "widgets/eSearch/assets/images/i_relate.png";
			private var _sumField:String = "";
			private var sortDetails:String = "";
			private var rsortDetails:String = "";
			
			[Bindable] private var _widgetInteract:Boolean;
			[Bindable] private var _popupsdiabled:Boolean;
			[Bindable] private var _disableRelateTab:Boolean;
			
			[Bindable] private var _renableExport:Boolean;
			[Bindable] private var rsumVisible:Boolean;
			[Bindable] private var _rlabelSum:String;
			private var _rsumField:String = "";
			
			private var sortAC:ArrayCollection;
			private var dgSort:Sort = new Sort();
			private var rsortArr:Array = [];
			private var rsortAC:ArrayCollection;
			private var rdgSort:Sort = new Sort();
			private var gFieldsAc:ArrayCollection;
			private var rgFieldsAc:ArrayCollection;
			
			private var sumFormat:String;
			
			private var rsumFormat:String;
			
			private var mWidgetTitle:String;
			
			private var popUpRenderer:PopUpRenderer = new PopUpRenderer();
			
			private var Hits:Array = new Array();
			
			private var useUTC:Boolean;
			
			[Embed(source="widgets/eSearch/assets/images/i_relate.png")]
			public var relateClass:Class;
			
			[Bindable] private var autoHide:Boolean;
			
			private var movingPanel:Boolean;
			
			private var panelIsOpen:Boolean;
			
			[Bindable] private var searchResultTab:String = "Search Results";
			
			[Bindable] private var relateResultTab:String = "Relate Results";

			[Bindable] private var autoHideLabel:String = "Auto Hide";
			
			private var columnIndexes:Vector.<int>;
			private var rcolumnIndexes:Vector.<int>;
			private var _headerBGColor:uint;
			private var _headerFontColor:uint;
			private var _repeatHeader:Boolean;
			private var _footerIncludeDate:Boolean;
			private var _footerDateFormat:String;
			private var _footerPageofPage:String;
			private var _footerDisclaimer:String;
			
			private function init():void
			{
                var fl:FeatureLayer = new FeatureLayer();
                fl
				if (configXML){
					var duration:Number = configXML.duration ? configXML.duration : panelIn.duration;
					if (configXML.height){
						height = configXML.height;
					}
					panelIn.yTo = height - 25;
					autoHide = configXML.autohide && configXML.autohide == "true";
					if(autoHide){
						panelIsOpen = true;
						movingPanel = true;
						panelIn.target = panel;
						panelOut.target = panel;
                        panel.addEventListener(MoveEvent.MOVE, panel_moveHandler);
						panelIn.duration = 0;
						panelIn.play();
						panelIn.addEventListener(EffectEvent.EFFECT_END, addEvent);
						addEventListener(ResizeEvent.RESIZE, resizeEvent);
					}
					panelIn.duration = duration;
					searchResultTab = configXML.labels.searchresulttab || "Search Results";
					relateResultTab = configXML.labels.relateresulttab || "Relate Results";
					autoHideLabel = configXML.labels.autohidelabel || "Auto hide";
				}
				AppEvent.addListener(AppEvent.DATA_PUBLISH, sharedDataUpdated);
				appWidth = FlexGlobals.topLevelApplication.width;
			}

			private function addEvent(event:Event):void
			{
				panelIsOpen = false;
				movingPanel = false;
				panelIn.removeEventListener(EffectEvent.EFFECT_END, addEvent);
				panel.addEventListener(MoveEvent.MOVE, panel_moveHandler);
			}
			
			/** Close the datagrid when the browser/panel is resized */
			private function resizeEvent(event:ResizeEvent):void
			{
				if(panelIsOpen == false){
					panelIn.end();
					panelIn.play();
				}
			}
			
			public function set zoomScale(value:Number):void
			{
				_zoomScale = value;
			}
			
			public function set zoomPercent(value:Number):void
			{
				_zoomPercent = value;
			}
			
			public function set hasRelates(value:Boolean):void
			{
				_hasRelates = value;
			}
			
			private function sumField(value:String):void
			{
				_sumField = value;
				if(value != ""){
					sumVisible = true;
				}else{
					sumVisible = false;
				}
			}
			
			private function rsumField(value:String):void
			{
				_rsumField = value;
				if(value != ""){
					rsumVisible = true;
				}else{
					rsumVisible = false;
				}
			}
			
			private function dgColumns(value:Array):void
			{
				gFieldsAc = new ArrayCollection;
				resultsGrid.columns = null;
				sumFormat = "";
				sortDetails = "";
				sortAC = new ArrayCollection();
				_dgColumns = value;
				var args:Array;
				var sortFld:SortField;
				var dgCol:GridColumn;
				var jdgCol:joinDataGridColumn;
				var dgColArr:ArrayList = new ArrayList();
				var fldObj:Object;
				if(_hasRelates){
					dgCol = new GridColumn();
					dgCol.dataField = "icon";
					dgCol.width = 65;
					dgCol.dataTipField = (_relateIcon)? _relateIcon:"widgets/eSearch/assets/images/i_relate.png";
					dgCol.showDataTips = false;
					dgCol.headerText = "Relate(s)";
					dgCol.labelFunction = getFileName;
					dgCol.itemRenderer = new ClassFactory(widgets.eSearch.HyperLinkIconColumn);
					dgColArr.addItem(dgCol);
					fldObj = new Object();
					fldObj.order = 0;
					fldObj.field = dgCol.dataField;
					gFieldsAc.addItem(fldObj);
				}
				for(var i:int=0; i < _dgColumns.length; i++){
					var cArr:Array = _dgColumns[i].split("~");						
					dgCol= new GridColumn(cArr[0]);
					fldObj = new Object();
					fldObj.order = cArr[7];
					if(cArr[0].indexOf( "." ) != -1){
						jdgCol= new joinDataGridColumn(cArr[0]);
						jdgCol.labelFunction = getLabel;
						if (cArr[2] != "NA"){
							jdgCol.labelFunction = getDateLbl;
							_dateFormat = cArr[2];
						}
						if (cArr[3] != "NA"){
							jdgCol.labelFunction = getCurrLbl;
							_currFormat = cArr[3];
							if(cArr[0] == _sumField){
								sumFormat = "cur";
							}
						}
						if (cArr[4] != "NA"){
							jdgCol.labelFunction = getNumLbl;
							_numFormat = cArr[4];
							if(cArr[0] == _sumField){
								sumFormat = "num";
							}
						}
						if (cArr[5] != "NA"){
							if(cArr[5] =="true"){
								useUTC = true;
							}else{
								useUTC = false;
							}
						}
						if (cArr[6] != "NA"){
							sortDetails = cArr[6];
							args = sortDetails.split("|");
							jdgCol.sortDescending = (args[0] == "asc")?false:true;
							if(args[2] == "date"){
								jdgCol.sortCompareFunction = date_sortCompareFunc;
							}
							sortAC.addItem({data: jdgCol,index: parseInt(args[1])});
						}
						if (_dgFieldAliases){
							jdgCol.headerText = _dgFieldAliases[cArr[0]];
						}
						if (cArr[1] != "NA" && cArr[6] != null){
							jdgCol.headerText = cArr[1];
						}
						dgColArr.addItem(jdgCol);
						fldObj.field = jdgCol.dataField;
						gFieldsAc.addItem(fldObj);
					}else{
						dgCol= new GridColumn(cArr[0]);
						dgCol.labelFunction = getLabel;
						if (cArr[2] != "NA"){
							dgCol.labelFunction = getDateLbl;
							_dateFormat = cArr[2];
						}
						if (cArr[3] != "NA"){
							dgCol.labelFunction = getCurrLbl;
							_currFormat = cArr[3];
							if(cArr[0] == _sumField){
								sumFormat = "cur";
							}
						}
						if (cArr[4] != "NA"){
							dgCol.labelFunction = getNumLbl;
							_numFormat = cArr[4];
							if(cArr[0] == _sumField){
								sumFormat = "num";
							}
						}
						if (cArr[5] != "NA"){
							if(cArr[5] =="true"){
								useUTC = true;
							}else{
								useUTC = false;
							}
						}
						if (cArr[6] != "NA" && cArr[6] != null){
							sortDetails = cArr[6];
							args = sortDetails.split("|");
							dgCol.sortDescending = (args[0] == "asc")?false:true;
							if(args[2] == "date"){
								dgCol.sortCompareFunction = date_sortCompareFunc;
							}
							sortAC.addItem({data: dgCol,index: parseInt(args[1])});
						}
						if (_dgFieldAliases){
							dgCol.headerText = _dgFieldAliases[cArr[0]];
						}
						if (cArr[1] != "NA"){
							dgCol.headerText = cArr[1];
						}
						dgColArr.addItem(dgCol);
						fldObj.field = dgCol.dataField;
						gFieldsAc.addItem(fldObj);
					}
				}
				fldObj = new Object();
				fldObj.order = 9999;
				dgCol = new GridColumn("oid");
				dgCol.visible = false;
				dgColArr.addItem(dgCol);
				fldObj.field = dgCol.dataField;
				gFieldsAc.addItem(fldObj);
				resultsGrid.columns = dgColArr;
				(resultsGrid.columns.getItemAt(resultsGrid.columnsLength - 1) as GridColumn).width = NaN;
				sortGridFldCols();
			}
			
			private function date_sortCompareFunc(itemA:Object, itemB:Object, column:GridColumn = null):int
			{
				var dateA:Date = new Date(itemA[column.dataField]);
				var dateB:Date = new Date(itemB[column.dataField]);
				return ObjectUtil.dateCompare(dateA, dateB);
			}

			private function rdgColumns(value:Array):void
			{
				rgFieldsAc = new ArrayCollection;
				relatesGrid.columns = null;
				rsumFormat = "";
				rsortDetails = "";
				_rdgColumns = value;
				rsortArr = [];
				rsortAC = new ArrayCollection();
				var args:Array;
				var dgCol:GridColumn;
				var jdgCol:joinDataGridColumn;
				var dgColArr:ArrayList = new ArrayList();
				var fldObj:Object;
				for(var i:int=0; i < _rdgColumns.length; i++){
					var cArr:Array = _rdgColumns[i].split("~");						
					dgCol= new GridColumn(cArr[0]);
					fldObj = new Object();
					fldObj.order = cArr[7];
					if(cArr[0].indexOf( "." ) != -1){
						jdgCol= new joinDataGridColumn(cArr[0]);
						jdgCol.labelFunction = getLabel;
						if (cArr[2] != "NA"){
							jdgCol.labelFunction = getDateLbl;
							_dateFormat = cArr[2];
						}
						if (cArr[3] != "NA"){
							jdgCol.labelFunction = getCurrLbl;
							_currFormat = cArr[3];
							if(cArr[0] == _sumField){
								sumFormat = "cur";
							}
						}
						if (cArr[4] != "NA"){
							jdgCol.labelFunction = getNumLbl;
							_numFormat = cArr[4];
							if(cArr[0] == _sumField){
								sumFormat = "num";
							}
						}
						if (cArr[5] != "NA"){
							if(cArr[5] =="true"){
								useUTC = true;
							}else{
								useUTC = false;
							}
						}
						if (cArr[6] != "NA"){
							rsortDetails = cArr[6];
							args = rsortDetails.split("|");
							jdgCol.sortDescending = (args[0] == "asc")?false:true;
							if(args[2] == "date"){
								jdgCol.sortCompareFunction = date_sortCompareFunc;
							}
							rsortAC.addItem({data: jdgCol,index: parseInt(args[1])});
						}
						if (_dgFieldAliases){
							jdgCol.headerText = _dgFieldAliases[cArr[0]];
						}
						if (cArr[1] != "NA" && cArr[6] != null){
							jdgCol.headerText = cArr[1];
						}
						dgColArr.addItem(jdgCol);
						fldObj.field = jdgCol.dataField;
						rgFieldsAc.addItem(fldObj);
					}else{
						dgCol= new GridColumn(cArr[0]);
						dgCol.labelFunction = getLabel;
						if (cArr[2] != "NA"){
							dgCol.labelFunction = getDateLbl;
							_dateFormat = cArr[2];
						}
						if (cArr[3] != "NA"){
							dgCol.labelFunction = getCurrLbl;
							_currFormat = cArr[3];
							if(cArr[0] == _sumField){
								sumFormat = "cur";
							}
						}
						if (cArr[4] != "NA"){
							dgCol.labelFunction = getNumLbl;
							_numFormat = cArr[4];
							if(cArr[0] == _sumField){
								sumFormat = "num";
							}
						}
						if (cArr[5] != "NA"){
							if(cArr[5] =="true"){
								useUTC = true;
							}else{
								useUTC = false;
							}
						}
						if (cArr[6] != "NA" && cArr[6] != null){
							rsortDetails = cArr[6];
							args = rsortDetails.split("|");
							dgCol.sortDescending = (args[0] == "asc")?false:true;
							if(args[2] == "date"){
								dgCol.sortCompareFunction = date_sortCompareFunc;
							}
							rsortAC.addItem({data: dgCol, index: parseInt(args[1])});
						}
						if (_rdgFieldAliases){
							dgCol.headerText = _rdgFieldAliases[cArr[0]];
						}
						if (cArr[1] != "NA"){
							dgCol.headerText = cArr[1];
						}
						dgColArr.addItem(dgCol);
						fldObj.field = dgCol.dataField;
						rgFieldsAc.addItem(fldObj);
					}
				}
				fldObj = new Object();
				fldObj.order = 9999;
				dgCol= new GridColumn("oid");
				dgCol.visible = false;
				dgColArr.addItem(dgCol);
				fldObj.field = dgCol.dataField;
				rgFieldsAc.addItem(fldObj);
				relatesGrid.columns = dgColArr;
				(relatesGrid.columns.getItemAt(relatesGrid.columnsLength - 1) as GridColumn).width = NaN;
				sortRelateGridFldCols();
			}
		
			private function toggleAutoHide():void
			{
				autoHide = !autoHide;
				if (autoHide){
					panelIn.target = panel;
					panelOut.target = panel;
					addEventListener(ResizeEvent.RESIZE, resizeEvent);
				}else{
					panelIn.target = null;
					panelOut.target = null;
					removeEventListener(ResizeEvent.RESIZE, resizeEvent);
				}
			}

			private function exportTo(event:Event):void
			{
				try{
					var data:String;
					var defaultFileName:String;
					if(optiongroup.selectedValue == _exp2csvBtnLbl){
						data = exportCSV(resultsGrid,_csvSep,"\n",columnIndexes);
						defaultFileName = _csvName + ".csv";
					}else{
						data = exportTXT(resultsGrid,"\n",columnIndexes);
						defaultFileName = _csvName + ".txt";
					}
					
					var fileReference:FileReference = new FileReference();
					fileReference.save(data, defaultFileName);
				}
				catch(error:Error){
					Alert.show(error.message);
				}
			}
			
			private function rexportTo(event:Event):void
			{
				try{
					var data:String;
					var defaultFileName:String;
					if(roptiongroup.selectedValue == _exp2csvBtnLbl){
						data = exportCSV(relatesGrid,_csvSep,"\n",rcolumnIndexes);
						defaultFileName = _rcsvName + ".csv";
					}else{
						data = exportTXT(relatesGrid,"\n",rcolumnIndexes);
						defaultFileName = _rcsvName + ".txt";
					}
					
					var fileReference:FileReference = new FileReference();
					fileReference.save(data,defaultFileName);
				}
				catch(error:Error){
					Alert.show(error.message);
				}
			}
			
			private function msToDate(ms:Number, dateFormat:String, useUTC:Boolean):String
			{
				var date:Date = new Date(ms);
				if (date.milliseconds == 999){
					date.milliseconds++;
				}
				if (useUTC){
					date.minutes += date.timezoneOffset;
				}
				
				if (dateFormat){
					dateFormatter.dateTimePattern = dateFormat;
					var result:String = dateFormatter.format(date);
					if (result){
						return result;
					}else{
						return dateFormatter.errorText;
					}
				}else{
					return date.toLocaleString();
				}
			}
			
			private function exportCSV(dataGrid:DataGrid, csvSeparator:String=",", lineSeparator:String="\n", sortVector:Vector.<int>=null):String
			{
				try{
					var data:String = "";
					var columnArray:ArrayList = dataGrid.columns as ArrayList;
					var columnCount:int = columnArray.length;
					var dataGridColumn:GridColumn;
					var header:String = "";
					var headerGenerated:Boolean = false;
					var dataProvider:ArrayCollection = ObjectUtil.copy(dataGrid.dataProvider) as ArrayCollection;
					
					//Set the sorting
					var sortFields:Array = [];
					var dpSort:Sort = new Sort();
					for (var v:int = 0; v < sortVector.length; v++){
						dataGridColumn = columnArray.getItemAt(sortVector[v]) as GridColumn;
						sortFields.push(dataGridColumn.sortField);
					}
					dpSort.fields = sortFields;
					dataProvider.sort = dpSort;
					dataProvider.refresh();
					
					//trace(ObjectUtil.toString(dataProvider));
					var rowCount:int = dataProvider.length;
					var dp:Object = null;
					var cursor:IViewCursor = dataProvider.createCursor();
					var j:int = 0;
					
					//loop through rows
					while (!cursor.afterLast){
						var object:Object = null;
						object = cursor.current;
						//loop through all columns for the row
						for(var i:int = 0; i < columnCount; i++){
							dataGridColumn = columnArray.getItemAt(i) as GridColumn;
							//Exclude column data which is invisible (hidden)
							if(!dataGridColumn.visible){
								continue;
							}
							if(dataGridColumn.dataField == "icon"){
								continue;
							}
							if((dataGridColumn.itemRenderer == HyperLinkColumn)||(dataGridColumn.itemRenderer == HyperLinkIconColumn)){
								if(object[dataGridColumn.dataField] != null){
									data += "\"" + object[dataGridColumn.dataField] + "\"";
								}else{
									data += '\"\"';
								}
							}else{
								if(dataGridColumn.itemToLabel(object) != null){
									data += "\""+ dataGridColumn.itemToLabel(object)+ "\"";
								}else{
									data += '\"\"';
								}
							}
							if(i < (columnCount -1)){
								data += csvSeparator;
							}
							//generate header of CSV, only if it's not genereted yet
							if (!headerGenerated){
								header += "\"" + dataGridColumn.headerText + "\"";
								if (i < columnCount - 1){
									header += csvSeparator;
								}
							}
						}
						headerGenerated = true;
						if (j < (rowCount - 1)){
							data += lineSeparator;
						}
						j++;
						cursor.moveNext ();
					}
					//set references to null:
					dataProvider = null;
					columnArray = null;
					dataGridColumn = null;		
				}
				catch(error:Error){
					return null;
					Alert.show(error.message);
				}
				return (header + lineSeparator + data);
			}
			
			private function exportTXT(dataGrid:DataGrid, lineSeparator:String="\n", sortVector:Vector.<int>=null):String
			{
				try{
					var data:String = "";
					var columnArray:ArrayList = dataGrid.columns as ArrayList;
					var columnCount:int = columnArray.length;
					var dataGridColumn:GridColumn;
					var header:String = "";
					var headerGenerated:Boolean = false;
					var dataProvider:ArrayCollection = ObjectUtil.copy(dataGrid.dataProvider) as ArrayCollection;
					
					//Set the sorting
					var sortFields:Array = [];
					var dpSort:Sort = new Sort();
					for (var v:int = 0; v < sortVector.length; v++){
						dataGridColumn = columnArray.getItemAt(sortVector[v]) as GridColumn;
						sortFields.push(dataGridColumn.sortField);
					}
					dpSort.fields = sortFields;
					dataProvider.sort = dpSort;
					dataProvider.refresh();
					
					var rowCount:int = dataProvider.length;
					var dp:Object = null;
					var cursor:IViewCursor = dataProvider.createCursor();
					var j:int = 0;
					
					//loop through rows
					while (!cursor.afterLast){
						var object:Object = null;
						object = cursor.current;
						//loop through all columns for the row
						for(var i:int = 0; i < columnCount; i++){
							dataGridColumn = columnArray.getItemAt(i) as GridColumn;
							//Exclude column data which is invisible (hidden)
							if(!dataGridColumn.visible){
								continue;
							}
							if(dataGridColumn.dataField == "icon"){
								continue;
							}
							if((dataGridColumn.itemRenderer == HyperLinkColumn)||(dataGridColumn.itemRenderer == HyperLinkIconColumn)){
								if(object[dataGridColumn.dataField] != null){
									data += "\"" + object[dataGridColumn.dataField] + "\"";
								}else{
									data += '\"\"';
								}
							}else{
								if(dataGridColumn.itemToLabel(object) != null){
									data += "\""+ dataGridColumn.itemToLabel(object)+ "\"";
								}else{
									data += '\"\"';
								}
							}
							if(i < (columnCount -1)){
								data += "\t";
							}
							//generate header of CSV, only if it's not genereted yet
							if (!headerGenerated){
								header += "\"" + dataGridColumn.headerText + "\"";
								if (i < columnCount - 1){
									header += "\t";
								}
							}
						}
						headerGenerated = true;
						if (j < (rowCount - 1)){
							data += lineSeparator;
						}
						j++;
						cursor.moveNext ();
					}
					//set references to null:
					dataProvider = null;
					columnArray = null;
					dataGridColumn = null;		
				}
				
				catch(error:Error){
					return null;
					Alert.show(error.message);
				}
				return (header + lineSeparator + data);
			}
			
			// this is going to be executed when ever the data provider changes:
			[Bindable("dataChange")]
			private function calcMaxLengths(input:Array):Array {
				// if there are items in the DP:
				if ( input.length > 0 ) {
                    var maxLengths:Object = {};
                    // temp variables:
                    var key:String = "";
                    var i:int=0;
                    var h:int=0;
                    var dp:Object = input;
                    // for each item in the DP:
                    for ( i=0; i<dp.length; i++ ) {
                        var o:Object = dp[i];
                        // for each key in the DP row:
                        for ( key in o ) {
                            // if the output doesn't have current key yet create it and set to 0:
                            if ( !maxLengths.hasOwnProperty(key) ) {
                                maxLengths[key] = 0;
                            }
                            // check if it's simple object (may cause unexpected issues for Boolean):
                            if ( ObjectUtil.isSimple(o[key]) ) {
                                // measure the text:
                                var cellMetrics:TextLineMetrics = FlexGlobals.topLevelApplication.measureText(o[key]+"");
                                // and if the width is greater than longest found up to now:
                                if ( cellMetrics.width > maxLengths[key] ) {
                                    // set it as the longest one:
                                    maxLengths[key] = cellMetrics.width;
                                }
                            }
                        }
                    }
                    
                    // apply column sizes:
                    for ( key in maxLengths ) {
                        for ( i=0; i<resultsGrid.columnsLength; i++ ) {
                            // if the column actually exists:
                            if ( GridColumn(resultsGrid.columns.getItemAt(i)).dataField.toUpperCase() == key.toUpperCase() ) {
                                var cellMetrics2:TextLineMetrics = FlexGlobals.topLevelApplication.measureText(GridColumn(resultsGrid.columns.getItemAt(i)).headerText+"W");
                                if ( cellMetrics2.width + 18 > Number(maxLengths[key]) + 12 ) {
                                    GridColumn(resultsGrid.columns.getItemAt(i)).width = cellMetrics2.width + 18;
                                } else {
                                    GridColumn(resultsGrid.columns.getItemAt(i)).width = Number(maxLengths[key]) + 12;
                                }							
                            }
                        }
                    }
                    //Now check if a hyperlink field has an alias and set the field width based on that alias or the header text
                    for each (var obj:Object in hypercols){
                        for ( i=0; i<resultsGrid.columnsLength; i++ ) {
                            if ( GridColumn(resultsGrid.columns.getItemAt(i)).dataField.toUpperCase() == obj.field.toUpperCase()) {
                                if(obj.alias != "NA"){
                                    cellMetrics2 = FlexGlobals.topLevelApplication.measureText(GridColumn(resultsGrid.columns.getItemAt(i)).headerText+"");
                                    var cellMetrics3:TextLineMetrics = FlexGlobals.topLevelApplication.measureText(obj.alias + "");
                                    if(cellMetrics3.width + 18 < cellMetrics2.width + 18){
                                        GridColumn(resultsGrid.columns.getItemAt(i)).width = cellMetrics2.width + 18;
                                    }else{
                                        GridColumn(resultsGrid.columns.getItemAt(i)).width = cellMetrics3.width + 18;
                                    }
                                }
                            }
                        }
                    }
				}
				// return an input:
				return input;
			}
			
			// this is going to be executed when ever the data provider changes:
			[Bindable("dataChange")]
			private function rcalcMaxLengths(input:Array):Array {
				// if there are items in the DP:
				if ( input.length > 0 ) {
                    var maxLengths:Object = {};
                    // temp variables:
                    var key:String = "";
                    var i:int=0;
                    var h:int=0;
                    var dp:Object = input;
                    // for each item in the DP:
                    for ( i=0; i<dp.length; i++ ) {
                        var o:Object = dp[i];
                        // for each key in the DP row:
                        for ( key in o ) {
                            // if the output doesn't have current key yet create it and set to 0:
                            if ( !maxLengths.hasOwnProperty(key) ) {
                                maxLengths[key] = 0;
                            }
                            // check if it's simple object (may cause unexpected issues for Boolean):
                            if ( ObjectUtil.isSimple(o[key]) ) {
                                // measure the text:
                                var cellMetrics:TextLineMetrics = FlexGlobals.topLevelApplication.measureText(o[key] + "W");
                                // and if the width is greater than longest found up to now:
                                if ( cellMetrics.width > maxLengths[key] ) {
                                    // set it as the longest one:
                                    maxLengths[key] = cellMetrics.width;
                                }
                            }
                        }
                    }
                    
                    // apply column sizes:
                    for ( key in maxLengths ) {
                        for ( i=0; i<relatesGrid.columnsLength; i++ ) {
                            // if the column actually exists:
                            if ( GridColumn(relatesGrid.columns.getItemAt(i)).dataField.toUpperCase() == key.toUpperCase() ) {
                                var cellMetrics2:TextLineMetrics = FlexGlobals.topLevelApplication.measureText(GridColumn(relatesGrid.columns.getItemAt(i)).headerText + "W");
                                if ( cellMetrics2.width + 18 > Number(maxLengths[key]) + 12 ) {
                                    GridColumn(relatesGrid.columns.getItemAt(i)).width = cellMetrics2.width + 18;
                                } else {
                                    GridColumn(relatesGrid.columns.getItemAt(i)).width = Number(maxLengths[key]) + 12;
                                }							
                            }
                        }
                    }
                    //Now check if a hyperlink field has an alias and set the field width based on that alias or the header text
                    for each (var obj:Object in rhypercols){
                        for ( i=0; i<relatesGrid.columnsLength; i++ ) {
                            if ( GridColumn(relatesGrid.columns.getItemAt(i)).dataField.toUpperCase() == obj.field.toUpperCase()) {
                                if(obj.alias != "NA"){
                                    cellMetrics2 = FlexGlobals.topLevelApplication.measureText(GridColumn(relatesGrid.columns.getItemAt(i)).headerText + "W");
                                    var cellMetrics3:TextLineMetrics = FlexGlobals.topLevelApplication.measureText(obj.alias + "W");
                                    if(cellMetrics3.width + 18 < cellMetrics2.width + 18){
                                        GridColumn(relatesGrid.columns.getItemAt(i)).width = cellMetrics2.width + 18;
                                    }else{
                                        GridColumn(relatesGrid.columns.getItemAt(i)).width = cellMetrics3.width + 18;
                                    }
                                }
                            }
                        }
                    }
				}
				// return an input:
				return input;
			}
			
			private function getLabel(item:Object,column:GridColumn):String
			{
				return item[column.dataField];
			}
			
			private function getDateLbl(item:Object,column:GridColumn):String
			{
				var dateMS:Number = Number(item[column.dataField]);
				var retVal:String = "";
				var rVal:String = item[column.dataField];
				if(rVal == null){
					//do nothing
				}else{
					if (!isNaN(dateMS)){
						//Fix the date format to use the Spark format
						_dateFormat = _dateFormat.replace(/D/g, "d").replace(/Y/g, "y");
						retVal = msToDate(dateMS, _dateFormat, useUTC);
					}
				}
				return retVal;
			}
			
			private function getNumLbl(item:Object,column:GridColumn):String
			{
				var args:Array = _numFormat.split("|");
				if(args[0]){
					numFormatter.fractionalDigits = args[0];
				}
				if(args[1]){
					numFormatter.groupingSeparator = args[1];
					numFormatter.useGrouping = true;
				}else{
					numFormatter.useGrouping = false;
				}
				if(args[2]){
					numFormatter.decimalSeparator = args[2];
				}
				return numFormatter.format(item[column.dataField]);
			}
			
			private function getCurrLbl(item:Object,column:GridColumn):String
			{
				var args:Array = _currFormat.split("|");
				if(args[0]){
					currFormatter.currencySymbol = args[0];
					currFormatter.useCurrencySymbol = true;
				}
				if(args[1]){
					currFormatter.fractionalDigits = args[1];
				}
				if(args[2]){
					currFormatter.groupingSeparator = args[2];
					currFormatter.useGrouping = true;
				}else{
					currFormatter.useGrouping = false;
				}
				if(args[3]){
					currFormatter.decimalSeparator = args[3];
				}
				return currFormatter.format(item[column.dataField]);
			}
			
			private function labelFunc2(item:Object, column:GridColumn):String
			{
				return item[column.dataField];
			}
			
			private function labelFunc(item:Object, column:GridColumn):String
			{
				var retVal:String = "Get Hyperlink";
				for each (var obj:Object in hypercols){
					if(obj.field.toUpperCase() == column.dataField.toUpperCase()){
						if(obj.alias != "NA"){
                            //handle if the alias is a field and not a string
                            //and if the field has been concatenated with a prefix and or suffix then get the original instead
                            var sub:String = StringUtil.substitute(obj.alias, item);
                            var hyperAttribCache:String = (sub)?HyperAttribsCache[sub]:null;
                            if (!hyperAttribCache){
							    retVal = (sub)?sub:obj.alias;
                            }else{
                                retVal = (hyperAttribCache)?hyperAttribCache:obj.alias;
                            }
						}
					}
				}
				if (item[column.dataField] == "" || item[column.dataField] == " " || 
					item[column.dataField] == "null" || item[column.dataField] == "unavailable"){
					retVal = "";
				}
				return retVal;
			}
			
			private function sortGridFldCols():void
			{
				var isrt:Sort = new Sort();
				isrt.fields = [new SortField("order",false,true)];
				gFieldsAc.sort = isrt;
				gFieldsAc.refresh();
				var uSortedFlds:ArrayList = resultsGrid.columns as ArrayList;
				var sortArr:ArrayList = new ArrayList;
				for(var s:int = 0; s < gFieldsAc.length; s++){
					for(var g:int = 0; g< uSortedFlds.length; g++){
						if((uSortedFlds.getItemAt(g) as GridColumn).dataField == gFieldsAc[s].field){
							sortArr.addItem(uSortedFlds.getItemAt(g));
							break;
						}
					}
				}
				resultsGrid.columns = sortArr;
			}
			
			private function sortRelateGridFldCols():void
			{
				var isrt:Sort = new Sort();
				isrt.fields = [new SortField("order",false,true)];
				rgFieldsAc.sort = isrt;
				rgFieldsAc.refresh();
				var uSortedFlds:ArrayList = relatesGrid.columns as ArrayList;
				var sortArr:ArrayList = new ArrayList;
				for(var s:int = 0; s < rgFieldsAc.length; s++){
					for(var g:int = 0; g< uSortedFlds.length; g++){
						if((uSortedFlds.getItemAt(g) as GridColumn).dataField == rgFieldsAc[s].field){
							sortArr.addItem(uSortedFlds.getItemAt(g));
							break;
						}
					}
				}
				relatesGrid.columns = sortArr;
			}
			
			private function dgHyperColumns(value:Array):void
			{
				var fldObj:Object;
				_dgHyperColumns = value;
				var dgCol:GridColumn;
				var dgColArr:ArrayList = resultsGrid.columns as ArrayList;
				hypercols = new ArrayCollection();
				for(var i:int=0; i < _dgHyperColumns.length; i++){
					var cArr:Array = _dgHyperColumns[i].split("~");
					fldObj = new Object();
					fldObj.order = cArr[6];
					hypercols.addItem({field: cArr[0], name: cArr[1], alias: cArr[2], pre: cArr[3], suf: cArr[4], icon: cArr[5]});
					dgCol= new GridColumn(cArr[0]);
					dgCol.labelFunction = labelFunc2;
					if (cArr[2] != "NA"){
						dgCol.labelFunction = labelFunc;
					}
					if (_dgFieldAliases){
						dgCol.headerText = _dgFieldAliases[cArr[0]];
					}
					if (cArr[1] != "NA"){
						dgCol.headerText = cArr[1];
					}
					if (cArr[5] != "NA"){
						dgCol.dataTipField = cArr[5];
						dgCol.showDataTips = false;
						dgCol.itemRenderer = new ClassFactory(widgets.eSearch.HyperLinkIconColumn);
					}else{
						dgCol.itemRenderer = new ClassFactory(widgets.eSearch.HyperLinkColumn);
					}
					dgColArr.addItem(dgCol);
					fldObj.field = dgCol.dataField;
					gFieldsAc.addItem(fldObj);
				}
				resultsGrid.columns = dgColArr;
				sortGridFldCols();
			}
			
			private function rdgHyperColumns(value:Array):void
			{
				var fldObj:Object;
				_rdgHyperColumns = value;
				var dgCol:GridColumn;
				var dgColArr:ArrayList = relatesGrid.columns as ArrayList;
				rhypercols = new ArrayCollection();
				for(var i:int=0; i < _rdgHyperColumns.length; i++){
					var cArr:Array = _rdgHyperColumns[i].split("~");
					fldObj = new Object();
					fldObj.order = cArr[6];
					rhypercols.addItem({field: cArr[0], name: cArr[1], alias: cArr[2], pre: cArr[3], suf: cArr[4], icon: cArr[5]});
					dgCol= new GridColumn(cArr[0]);
					dgCol.labelFunction = labelFunc2;
					if (cArr[2] != "NA"){
						dgCol.labelFunction = labelFunc;
					}
					if (_dgFieldAliases){
						dgCol.headerText = _rdgFieldAliases[cArr[0]];
					}
					if (cArr[1] != "NA"){
						dgCol.headerText = cArr[1];
					}
					if (cArr[5] != "NA"){
						dgCol.dataTipField = cArr[5];
						dgCol.showDataTips = false;
						dgCol.itemRenderer = new ClassFactory(widgets.eSearch.HyperLinkIconColumn);
					}else{
						dgCol.itemRenderer = new ClassFactory(widgets.eSearch.HyperLinkColumn);
					}
					dgColArr.addItem(dgCol);
					fldObj.field = dgCol.dataField;
					rgFieldsAc.addItem(fldObj);
				}
				relatesGrid.columns = dgColArr;
				sortRelateGridFldCols();
			}

            private var HyperAttribsCache:Dictionary;
			private function dProvider(value:Object):void
			{
                HyperAttribsCache = new Dictionary();
				_data = ObjectUtil.copy(value) as Array;
				for each(var attributes:Object in _data){
					for(var i:int=0; i<hypercols.length; i++){
						//concatenate if
						if(String(attributes[hypercols[i].field]) != "" 
							&& String(attributes[hypercols[i].field]) != " " 
							&& String(attributes[hypercols[i].field]) != null
							&& String(attributes[hypercols[i].field]) != "unavailable"){
							var pre:String = (hypercols[i].pre == "NA") ? "" : String(hypercols[i].pre);
							var suf:String = (hypercols[i].suf == "NA") ? "" : String(hypercols[i].suf);
                            HyperAttribsCache[String(pre + String(attributes[hypercols[i].field]) + suf)] = attributes[hypercols[i].field];
							attributes[hypercols[i].field] = String(pre + String(attributes[hypercols[i].field]) + suf);
						}
					}
					if(_hasRelates){
						attributes["icon"] = "defined";
					}
					if(_layerDetails){
						var fld:Object;
						var cVal:CodedValue;
						var cDomain:CodedValueDomain;
						for each (fld in _layerDetails.fields){
							var typeID:String = _layerDetails.typeIdField ? attributes[fld.name] : null;
							if (_layerDetails.typeIdField && fld.name.toUpperCase() == _layerDetails.typeIdField.toUpperCase()){
								// replace value with feature type name
								var featureType:FeatureType = getFeatureType(typeID,_layerDetails);
								if (featureType && featureType.name){
									attributes[fld.name] = featureType.name;
								}
							}else{
								// replace value with coded value name if one exists
								if (typeID){
									var fType:FeatureType = getFeatureType(typeID,_layerDetails);
									if (fType){
										cDomain = fType.domains[fld.name] as CodedValueDomain;
									}
								}else if(fld.domain){
									cDomain = fld.domain as CodedValueDomain;
								}else{
									cDomain = null;
								}
								if (cDomain){
									for each (var codedValue:CodedValue in cDomain.codedValues){
										if (attributes[fld.name] == codedValue.code){
											attributes[fld.name] = codedValue.name;
											break;
										}
									}
								}
							}
						}
					} 
				}
				resultsGrid.dataProvider = new ArrayCollection(calcMaxLengths(_data));
				var reset:Vector.<int> = Vector.<int>([]);
				resultsGrid.columnHeaderGroup.visibleSortIndicatorIndices = reset;
				
				if(_sumField){
					try{
						var total:Number = 0;
						for each (var row:Object in resultsGrid.dataProvider) {
							total += Number(row[_sumField]);
						}
						if(sumFormat == "num"){
							var args:Array = _numFormat.split("|");
							if(args[0]){
								numFormatter.fractionalDigits = args[0];
							}
							if(args[1]){
								numFormatter.groupingSeparator = args[1];
								numFormatter.useGrouping = true;
							}else{
								numFormatter.useGrouping = false;
							}
							if(args[2]){
								numFormatter.decimalSeparator = args[2];
							}
							taSum.text = numFormatter.format(total);
						}else if(sumFormat == "cur"){
							var args2:Array = _currFormat.split("|");
							if(args[0]){
								currFormatter.currencySymbol = args[0];
								currFormatter.useCurrencySymbol = true;
							}
							if(args[1]){
								currFormatter.fractionalDigits = args[1];
							}
							if(args[2]){
								currFormatter.groupingSeparator = args[2];
								currFormatter.useGrouping = true;
							}else{
								currFormatter.useGrouping = false;
							}
							if(args[3]){
								currFormatter.decimalSeparator = args[3];
							}
							taSum.text = currFormatter.format(total);
						}else{
							taSum.text = total.toString();
						}
					}
					catch (error:Error){
						sumVisible = false;
					}
				}
				var isrt:Sort = new Sort();
				isrt.fields = [new SortField("index",false,true)];
				sortAC.sort = isrt;
				sortAC.refresh();
				var sortArr:Array = [];
				for(var s:int = 0; s < sortAC.length; s++){
					sortArr.push(resultsGrid.columns.getItemIndex(sortAC[s].data));
				}
				
				columnIndexes = Vector.<int>(sortArr);
				resultsGrid.sortByColumns(columnIndexes, true);
			}
			
			private function getFeatureType(typeID:String, lDtls:*):FeatureType
			{
				var result:FeatureType;
				
				for each (var featureType:FeatureType in lDtls.types){
					if (typeID == featureType.id){
						result = featureType;
						break;
					}
				}
				
				return result;
			}
			
			private function rdProvider(value:Object):void
			{
                if(!HyperAttribsCache){
                    HyperAttribsCache = new Dictionary();
                }
				_rdata = ObjectUtil.copy(value)  as Array;
				for each(var attributes:Object in _rdata){
					for(var i:int=0; i<rhypercols.length; i++){
						//concatenate if
						if(String(attributes[rhypercols[i].field]) != "" && String(attributes[rhypercols[i].field]) != " " && String(attributes[rhypercols[i].field]) != null){
							var pre:String = (rhypercols[i].pre == "NA") ? "" : String(rhypercols[i].pre);
							var suf:String = (rhypercols[i].suf == "NA") ? "" : String(rhypercols[i].suf);
                            HyperAttribsCache[String(pre + String(attributes[rhypercols[i].field]) + suf)] = attributes[rhypercols[i].field];
							attributes[rhypercols[i].field] = pre + String(attributes[rhypercols[i].field]) + suf;
						}
					}
					
					if(_rlayerDetails){
						var fld:Object;
						var cVal:CodedValue;
						var cDomain:CodedValueDomain;
						for each (fld in _rlayerDetails.fields){
							var typeID:String = _rlayerDetails.typeIdField ? String(attributes[_rlayerDetails.typeIdField]) : null;
							if (fld.name == _rlayerDetails.typeIdField){
								// replace value with feature type name
								var featureType:FeatureType = getFeatureType(typeID,_rlayerDetails);
								if (featureType && featureType.name){
									attributes[fld.name] = featureType.name;
								}
							}else{
								// replace value with coded value name if one exists
								if (typeID){
									var fType:FeatureType = getFeatureType(typeID,_rlayerDetails);
									if (fType){
										cDomain = fType.domains[fld.name] as CodedValueDomain;
									}
								}else{
									cDomain = fld.domain as CodedValueDomain;
								}
								
								if (cDomain){
									for each (var codedValue:CodedValue in cDomain.codedValues){
										if (attributes[fld.name] == codedValue.code){
											attributes[fld.name] = codedValue.name;
											break;
										}
									}
								}
							}
						}
					} 
				} 
				relatesGrid.dataProvider = new ArrayCollection(rcalcMaxLengths(_rdata));
				var reset:Vector.<int> = Vector.<int>([]);
				relatesGrid.columnHeaderGroup.visibleSortIndicatorIndices = reset;
				
				if(_rsumField){
					try{
						var total:Number = 0;
						for each (var row:Object in relatesGrid.dataProvider) {
							total += Number(row[_rsumField]);
						}
						if(rsumFormat == "num"){
							var args:Array = _numFormat.split("|");
							if(args[0]){
								numFormatter.fractionalDigits = args[0];
							}
							if(args[1]){
								numFormatter.groupingSeparator = args[1];
								numFormatter.useGrouping = true;
							}else{
								numFormatter.useGrouping = false;
							}
							if(args[2]){
								numFormatter.decimalSeparator = args[2];
							}
							rtaSum.text = numFormatter.format(total);
						}else if(rsumFormat == "cur"){
							var args2:Array = _currFormat.split("|");
							if(args[0]){
								currFormatter.currencySymbol = args[0];
								currFormatter.useCurrencySymbol = true;
							}
							if(args[1]){
								currFormatter.fractionalDigits = args[1];
							}
							if(args[2]){
								currFormatter.groupingSeparator = args[2];
								currFormatter.useGrouping = true;
							}else{
								currFormatter.useGrouping = false;
							}
							if(args[3]){
								currFormatter.decimalSeparator = args[3];
							}
							rtaSum.text = currFormatter.format(total);
						}else{
							rtaSum.text = total.toString();
						}
					}
					catch (error:Error){
						rsumVisible = false;
					}
				}
				
				var isrt:Sort = new Sort();
				isrt.fields = [new SortField("index",false,true)];
				rsortAC.sort = isrt;
				rsortAC.refresh();
				var rsortArr:Array = [];
				for(var s:int = 0; s < rsortAC.length; s++){
					rsortArr.push(relatesGrid.columns.getItemIndex(rsortAC[s].data));
				}
				
				rcolumnIndexes = Vector.<int>(rsortArr);
				relatesGrid.sortByColumns(rcolumnIndexes, true);
			}
			
			private function panel_rollOutHandler(event:MouseEvent):void
			{
				panelIsOpen = false;
				movingPanel = true;
				panelOut.end();
				panelIn.play();
			}
			
			private function panel_rollOverHandler(event:MouseEvent):void
			{
				panelIsOpen = true;
				movingPanel = true;
				panelIn.end();
				panelOut.play();
			}
			
			private function sharedDataUpdated(event:AppEvent):void
			{
				var data:Object = event.data;
				
				if (data.key == "configFixedDatagrid"){
					if (data.collection[0]){
						var theObj:Object = data.collection[0];
						mWidgetTitle = theObj.widgetTitle;
						_layerDetails = theObj.layerDetails;
						_featLayer = theObj.featLayer;
                        _hasRelates = theObj.hasRelates;
						_exp2csvBtnLbl = theObj.csvExportOptionLbl;
						_exp2txtBtnLbl = theObj.txtExportOptionLbl;
						_exportButtonLbl = theObj.ExportButtonLbl;
						_csvSep = theObj.csvSeperator;
						_dgFieldAliases = theObj.dgFieldAliases;
						_csvName = theObj.csvName;
						sumField(theObj.sumField);
						_labelSum = theObj.labelSum;
						dgColumns(theObj.dgColumns);
						dgHyperColumns(theObj.dgHyperColumns);
						dProvider(theObj.dProvider);
						_qFeatLyr = theObj.featLayer;
						_zoomScale = theObj.zoomScale;
						_zoomPercent = theObj.zoomPercent;
						_bWidget = theObj.ownerWidget;
						_enableExport = theObj.enableExport;
						_enablePrint = theObj.enablePrint;
						_widgetInteract = theObj.widgetInteract;
						_popupsdiabled = theObj.popupsdisabled;
						_disableRelateTab = (theObj.disableRelateTab)?false:true;
						_relateIcon = theObj.relateIcon;
						_relateTooltip = theObj.relateToolTip;
						_headerBGColor = theObj.headerBGColor;
						_repeatHeader = theObj.repeatHeader;
						_headerFontColor = theObj.headerFontColor;
						tabs.selectedIndex = 0;
						_footerIncludeDate = theObj.includeDateInFooter;
						_footerDateFormat = theObj.footerDateFormat;
						_footerPageofPage = theObj.footerPageofPage;
						_footerDisclaimer = theObj.footerDisclaimer;
                        if(theObj.autoOpenDataGrid){
                            panel_rollOverHandler(null);
                        }
					}
				}
				if (data.key == "configRelateFixedDatagrid"){
					if (data.collection[0]){
						var therObj:Object = data.collection[0];
                        _rRid = therObj.relateId;
                        _rLayer = therObj.relateLayer;
						_rlayerDetails = therObj.layerDetails;
						_rdgFieldAliases = therObj.dgFieldAliases;
						_rcsvName = therObj.csvName;
						rsumField(therObj.sumField);
						_rlabelSum = therObj.labelSum;
						rdgColumns(therObj.dgColumns);
						rdgHyperColumns(therObj.dgHyperColumns);
						rdProvider(therObj.dProvider);
						_renableExport = therObj.enableExport;
						_renablePrint = therObj.enablePrint;
						_relateIcon = therObj.relateIcon;
                        relateResultTab = therObj.relateToolTip;
						_headerBGColor = therObj.headerBGColor;
						_repeatHeader = therObj.repeatHeader;
						_headerFontColor = therObj.headerFontColor;
						_footerIncludeDate = therObj.includeDateInFooter;
						_footerDateFormat = therObj.footerDateFormat;
						_footerPageofPage = therObj.footerPageofPage;
						_footerDisclaimer = therObj.footerDisclaimer;
                        _zoomScale = therObj.zoomScale;
                        _zoomPercent = therObj.zoomPercent;
						mWidgetTitle = therObj.widgetTitle;
						if(!_disableRelateTab){
							_disableRelateTab == true;
						}
                        if(therObj.autoOpenDataGrid){
                            panel_rollOverHandler(null);
                        }
					}
				}
				if (data.key == "clearRelateFixedDatagrid"){
					if(relatesGrid.dataProvider == null || relatesGrid.dataProvider.length == 0){
					}else{
						relatesGrid.dataProvider.removeAll();
						rsumVisible = false;
						_rlabelSum = "";
						//Reset the datagrids sort indicators
						var rreset:Vector.<int> = Vector.<int>([]);
						relatesGrid.columnHeaderGroup.visibleSortIndicatorIndices = rreset;
						_renableExport = false;
						_renablePrint = false;
						panel_rollOutHandler(null);
					}
				}
				if (data.key == "clearFixedDatagrid"){
					if(resultsGrid.dataProvider == null || resultsGrid.dataProvider.length == 0){
					}else{
						resultsGrid.dataProvider.removeAll();
						//Reset the datagrids sort indicators
						var reset:Vector.<int> = Vector.<int>([]);
						resultsGrid.columnHeaderGroup.visibleSortIndicatorIndices = reset;
						sumVisible = false;
						_labelSum = "";
						_enableExport = false;
						_enablePrint = false;
						panel_rollOutHandler(null);
					}
				}
				if (data.key == "scrollFixedDataGrid"){
					if (data.collection[0]){
						var theObj2:Object = data.collection[0];
						Hits.length = 0;
						for each(var attributes:Object in resultsGrid.dataProvider){
							if (attributes.oid === theObj2.searchResultoid){
								var myCursor:IViewCursor = (resultsGrid.dataProvider as ArrayCollection).createCursor();
								while(!myCursor.afterLast){
									if(myCursor.current.oid == attributes.oid){
										Hits.push(myCursor.current);
									}
									myCursor.moveNext();
								}
								resultsGrid.selectedIndex = resultsGrid.dataProvider.getItemIndex(Hits[0])                        
							}
						}
						if(resultsGrid.selectedIndex > -1){
							resultsGrid.ensureCellIsVisible(resultsGrid.selectedIndex);
						}
					}
				}
				if (data.key == "switch2RelateTabFixedDataGrid"){
					panel_rollOverHandler(null);
					if(tabs.selectedIndex != 1){
						tabs.selectedIndex = 1;
						if(!_disableRelateTab){
							_disableRelateTab == true;
						}
					}
				}
			}

			private function onItemRollOut(event:GridEvent):void
			{
				clearTimeout(hitimer);
				if(_widgetInteract && _bWidget){
					_bWidget.unhighlightDataGroupItems();
				}
			}
			
			private function onItemRollOver(event:GridEvent):void
			{
				clearTimeout(hitimer);
				if(_widgetInteract  && _bWidget){
					if(!event.itemRenderer || !event.itemRenderer.data){
						return;
					}
					_bWidget.highlightDataGroupItemByOID(event.itemRenderer.data.oid);
					var searchResult:Object = findSearchResultByOID(event.itemRenderer.data.oid);
					if(_popupsdiabled == false){
						if(searchResult.graphic && searchResult.point){
							if (map.extent.containsXY(searchResult.point.x, searchResult.point.y)){
								hitimer = setTimeout(showInfoWindow, 300, searchResult);
							}else{
								hideInfoWindow();
							}
						}
					}
				}
			}
			
			private function hideInfoWindow():void
			{
				if (map.infoWindow.contentOwner &&
					((map.infoWindow.contentOwner is Graphic && Graphic(map.infoWindow.contentOwner).parent === _qFeatLyr) || map.infoWindow.contentOwner is Map))
				{
					map.infoWindow.hide();
				}
			}
			
			override public function showInfoWindow(infoData:Object):void
			{
				var showHighlightPoint:MapPoint = infoData.point as MapPoint;
				popUpRenderer.popUpInfo = configurePopUpInfo(infoData.links);
				popUpRenderer.graphic = infoData.graphic;
				map.infoWindow.content = popUpRenderer;
				map.infoWindow.contentOwner = popUpRenderer.graphic;
				map.infoWindow.show(showHighlightPoint);
			}
			
			private function configurePopUpInfo(links:Array):PopUpInfo
			{
				var popUpInfo:PopUpInfo = new PopUpInfo;
				popUpInfo.title = "{title__pu__sr}";
				popUpInfo.description = "{content__pu__sr}";
				popUpInfo.showAttachments = true;
				var pminfos:Array = [];
				
				for(var l:int=0; l<links.length; l++){
					if (links[l].link){
						var pos:Number = links[l].link.length - 4;
						var sfx:String = String(links[l].link).substr(pos, 4).toLowerCase();
						if ((sfx == ".jpg") || (sfx == ".png") || (sfx == ".gif")){ // use PopUpMediaInfo if it is an image
							var popUpMediaInfo:PopUpMediaInfo = new PopUpMediaInfo;
							popUpMediaInfo.type = PopUpMediaInfo.IMAGE;
							popUpMediaInfo.imageLinkURL = links[l].link;
							popUpMediaInfo.imageSourceURL = links[l].link;
							pminfos.push(popUpMediaInfo);
						}else{
							var lText:String = (links[l].alias != "") ? links[l].alias : links[l].link;
							popUpInfo.description += "<br /><a href='" + links[l].link + "'>" + lText + "</a>"
						}
					}
				}
				popUpInfo.popUpMediaInfos = pminfos;
				return popUpInfo;
			}
			
			private function highLightSel(event:Event):void
			{
				clearTimeout(hitimer);
				if(resultsGrid.selectedItem && _bWidget){
					_bWidget.highlightDataGroupItemByOID(resultsGrid.selectedItem.oid);
				}
			}
			
			private function unhighLightSel(event:Event):void
			{
				if(resultsGrid.selectedItem && _bWidget){
					_bWidget.unhighlightDataGroupItems();
				}
			}
			
			private function findSearchResultByOID(oid:Number):*
			{
				var retSR:*;	
				for (var i:Number = 0; i < _bWidget.searchResultAC.length; i++){
					var sr:* = _bWidget.searchResultAC[i];
					if(sr.oid == oid){
						retSR = sr;
						break;
					}
				}
				return retSR;
			}
            
            private function rclickRow(event:GridEvent):void
            {
                var oidString:String = _rlayerDetails.objectIdField;
                if(!event.itemRenderer || !event.itemRenderer.data){
                    return;
                }
                //Check if the relate layer has layer details or table details
                if(_rlayerDetails is LayerDetails){
                    var query:Query = new Query();
                    query.returnGeometry = true;
                    query.objectIds = [event.itemRenderer.data[oidString]];
                    query.outFields = [oidString];
                    query.outSpatialReference = map.spatialReference;
                    _rLayer.selectFeatures(query, FeatureLayer.SELECTION_NEW, new AsyncResponder(result1, fault));
                }else{
                    var rq:RelationshipQuery = new RelationshipQuery();
                    rq.objectIds = [event.itemRenderer.data[oidString]];
                    rq.returnGeometry = true;
                    rq.relationshipId = _rRid;
                    rq.outFields = [oidString];
                    rq.outSpatialReference = map.spatialReference;
                    _rLayer.queryRelatedFeatures(rq, new AsyncResponder(result, fault, event.itemRenderer.data[oidString]));  
                }
                
                function result1(feats:Array, token:Object):void{
                    if (!feats){
                        map.cursorManager.removeBusyCursor();
                        return;
                    }
                    if (feats && feats){
                        if(feats.length == 1 && Graphic(feats[0]).geometry is MapPoint){
                            var mp:MapPoint = MapPoint(Graphic(feats[0]).geometry);
                            if(isNaN(_zoomScale)){
                                map.zoom(1 / 16, MapPoint(mp));
                                map.centerAt(MapPoint(mp));
                            }else{
                                if (map.scale > _zoomScale){
                                    map.scale = _zoomScale;
                                }
                                map.centerAt(mp);
                            }
                        }else{
                            var ext:Extent = GraphicUtil.getGraphicsExtent(feats);
                            if(isNaN(_zoomScale)){
                                if(isNaN(_zoomPercent)){
                                    _zoomPercent = 1.2;
                                }
                                map.zoomTo(ext.expand(_zoomPercent));
                            }else{
                               if (map.scale > _zoomScale){
                                    map.scale = _zoomScale;
                                }
                               map.zoomTo(ext.center);
                            }
                        }
                    }
                }
                
                function result(relatedRecords:Object, token:Object = null):void
                {
                    var fset:FeatureSet = (relatedRecords[token]);
                    if (!fset){
                        map.cursorManager.removeBusyCursor();
                        return;
                    }
                    if (fset && fset.features){
                        if(fset.features.length == 1 && Graphic(fset.features[0]).geometry is MapPoint){
                            if(isNaN(_zoomScale)){
                                map.zoom(1 / 16, MapPoint(fset.features[0]));
                                map.centerAt(MapPoint(fset.features[0]));
                            }else{
                                if (map.scale > _zoomScale){
                                    map.scale = _zoomScale;
                                }
                                map.centerAt(MapPoint(fset.features[0]));
                            }
                        }else{
                            var ext:Extent = GraphicUtil.getGraphicsExtent(fset.features);
                            if(isNaN(_zoomScale)){
                                map.zoomTo(ext.expand(_zoomPercent));
                            }else{
                                if (map.scale > _zoomScale){
                                    map.scale = _zoomScale;
                                }
                                map.zoomTo(ext);
                            }
                        }
                    }
                }
                
                function fault(event:Fault, token:Object = null):void
                {
                    Alert.show(event.faultString);
                }
            }
			
			private function clickRow(event:GridEvent):void
			{
				if(!event.itemRenderer || !event.itemRenderer.data){
					return;
				}
				var searchResult:* = findSearchResultByOID(event.itemRenderer.data.oid);
				if(!searchResult.graphic){
					if(event.itemRenderer is HyperLinkIconColumn){
						_bWidget.standaloneRelate(event.itemRenderer.data.oid);
					}
					return;
				}
				if(event.itemRenderer is HyperLinkIconColumn){
					var hlic:HyperLinkIconColumn = event.itemRenderer as HyperLinkIconColumn;
					if(hlic.data[hlic.getDataField()] == "defined"){
						_bWidget.clickSearchRelateResult(searchResult);
					}
					return;
				}
				var pt:MapPoint = searchResult.point;
				var map:Map = ViewerContainer.getInstance().mapManager.map;
				if (searchResult.graphic.geometry){
					if (searchResult.graphic.geometry.type == Geometry.MAPPOINT){
						if(isNaN(_zoomScale)){
							map.zoom(1 / 16, searchResult.point);
							map.centerAt(searchResult.point);
						}else{
							if (map.scale > _zoomScale){
								map.scale = _zoomScale;
							}
							map.centerAt(searchResult.point);
						}
					}else{
						if(isNaN(_zoomScale)){
							map.zoomTo(searchResult.graphic.geometry.extent.expand(_zoomPercent));
						}else{
							if (map.scale > _zoomScale){
								map.scale = _zoomScale;
							}
							map.zoomTo(searchResult.point);
						}
					}
					if(_popupsdiabled == false){
						callLater(showInfoWindow, [searchResult]);
					}
				}
			}
			
			private function getFileName(o:Object, c:GridColumn):String
			{
				return _relateTooltip;
			}
			
			protected function dataGridResizeHandler(event:Event):void
			{
				if(event.target.columnsLength > 0){
					(event.target.columns.getItemAt(event.target.columnsLength - 1) as GridColumn).width = NaN;
				}
			}
			
			protected function panel_moveHandler(event:MoveEvent):void
			{
				if(movingPanel){
					movingPanel = false;
				}else{
					event.preventDefault();
					event.stopImmediatePropagation();
					event.target.y = height - 25;
					panel.removeEventListener(MoveEvent.MOVE, panel_moveHandler);
				}
			}
			
			protected function PrintDDGBtn_clickHandler(event:MouseEvent):void
			{
				var printProps:PrintProperties = new PrintProperties();
				printProps.dataGrid = resultsGrid;
				printProps.title = mWidgetTitle;
				printProps.sortCols = columnIndexes;
				printProps.headerBGColor = _headerBGColor;
				printProps.repeatHeader = _repeatHeader;
				printProps.headerFontColor = _headerFontColor;
				printProps.dateformat = _footerDateFormat;
				printProps.pageofpage = _footerPageofPage;
				printProps.disclaimer = _footerDisclaimer;
				printProps.includedate = _footerIncludeDate;
				PrintUtil.printDataGrid(printProps, this.stage, getUserAgent());
			}
			
			protected function rPrintDDGBtn_clickHandler(event:MouseEvent):void
			{
				var printProps:PrintProperties = new PrintProperties();
				printProps.dataGrid = relatesGrid;
				printProps.title = mWidgetTitle;
				printProps.sortCols = rcolumnIndexes;
				printProps.headerBGColor = _headerBGColor;
				printProps.repeatHeader = _repeatHeader;
				printProps.headerFontColor = _headerFontColor;
				printProps.dateformat = _footerDateFormat;
				printProps.pageofpage = _footerPageofPage;
				printProps.disclaimer = _footerDisclaimer;
				printProps.includedate = _footerIncludeDate;
				PrintUtil.printDataGrid(printProps, this.stage, getUserAgent());
			}
            
            private static function getUserAgent():String
            {
                var userAgent:String;
                try
                {
                    userAgent = ExternalInterface.call("window.navigator.userAgent.toString");
                    var browser:String = "[Unknown Browser]";
                    
                    if (userAgent.indexOf("Safari") != -1)
                    {
                        browser = "Safari";
                    }
                    if (userAgent.indexOf("Firefox") != -1)
                    {
                        browser = "Firefox";
                    }
                    if (userAgent.indexOf("Chrome") != -1)
                    {
                        browser = "Chrome";
                    }
                    if (userAgent.indexOf("MSIE") != -1)
                    {
                        browser = "Internet Explorer";
                    }
                    if (userAgent.indexOf("Opera") != -1)
                    {
                        browser = "Opera";
                    }
                }
                catch (e:Error)
                {
                    //could not access ExternalInterface in containing page
                    return "[No ExternalInterface]";
                }
                return browser;
            }
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:RadioButtonGroup id="optiongroup"/>
		<s:RadioButtonGroup id="roptiongroup"/>
	</fx:Declarations>
	<s:VGroup gap="-1" height="100%" width="100%" id="panel">
		<s:TabBar id="tabs" dataProvider="{vs}" skinClass="widgets.eSearch.skins.TabBarSkin"
				  rollOver="panel_rollOverHandler(event)"
				  rollOut="panel_rollOutHandler(event)"/>
		<mx:ViewStack id="vs" height="100%" width="100%" creationPolicy="all"
				rollOver="panel_rollOverHandler(event)"
				rollOut="panel_rollOutHandler(event)">
			<s:NavigatorContent label="{searchResultTab}" width="100%"  height="100%" backgroundColor="{getStyle('chromeColor')}" backgroundAlpha="{getStyle('backgroundAlpha')}">
				<s:SkinnableContainer height="100%" width="100%" backgroundAlpha="{getStyle('backgroundAlpha')}" backgroundColor="{getStyle('chromeColor')}">
					<s:VGroup gap="0" width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" >
						<s:DataGrid id="resultsGrid" height="100%" width="100%"
									 resize="dataGridResizeHandler(event)"
									 updateComplete="dataGridResizeHandler(event)"
									 gridClick="clickRow(event)"
									 gridRollOut="onItemRollOut(event)"
									 gridRollOver="onItemRollOver(event)"
									 rollOut="highLightSel(event)"
									 rollOver="unhighLightSel(event)"
									 horizontalScrollPolicy="auto"
									 contentBackgroundAlpha="{getStyle('styleAlpha')}"
									 contentBackgroundColor="{getStyle('chromeColor')}"
									 alternatingRowColors="{[getStyle('chromeColor'),getStyle('chromeColor')]}"/>
						<s:HGroup verticalAlign="middle" paddingLeft="4" width="100%" paddingBottom="2" paddingTop="2">
							<s:CheckBox selected="{autoHide}" change="toggleAutoHide()" label="{autoHideLabel}"/>
							<s:HGroup verticalAlign="middle" paddingLeft="4" paddingTop="3" paddingBottom="3" paddingRight="30" horizontalAlign="right" height="34" width="100%" visible="{_enableExport || sumVisible || _enablePrint}" includeInLayout="{_enableExport || sumVisible || _enablePrint}">
								<s:Label id="lblSum" text="{_labelSum}" visible="{sumVisible}" includeInLayout="{sumVisible}"/>
								<s:TextArea id="taSum" heightInLines="1" editable="false" borderVisible="false" visible="{sumVisible}" includeInLayout="{sumVisible}"/>
								<s:RadioButton label="{_exp2csvBtnLbl}" groupName="optiongroup" selected="true" visible="{_enableExport}" includeInLayout="{_enableExport}"/>
								<s:RadioButton label="{_exp2txtBtnLbl}" groupName="optiongroup" visible="{_enableExport}" includeInLayout="{_enableExport}"/>
								<s:Button id="Export" height="24" label="{_exportButtonLbl}" click="exportTo(event)" skinClass="widgets.eSearch.skins.ExportButtonSkin" visible="{_enableExport}" includeInLayout="{_enableExport}"/>
								<s:Button id="PrintDDGBtn" height="24" label="{getDefaultString('printSubmitLabel')}" click="PrintDDGBtn_clickHandler(event)" skinClass="widgets.eSearch.skins.PrintButtonSkin" visible="{_enablePrint}" includeInLayout="{_enablePrint}"/>
							</s:HGroup>
						</s:HGroup>
					</s:VGroup>
				</s:SkinnableContainer>
			</s:NavigatorContent>
			<s:NavigatorContent label="{relateResultTab}" width="100%" height="100%" backgroundColor="{getStyle('chromeColor')}" backgroundAlpha="{getStyle('backgroundAlpha')}" maxWidth="{appWidth}"
								enabled="{_disableRelateTab}" >
				<s:SkinnableContainer height="100%" width="100%" backgroundAlpha="{getStyle('backgroundAlpha')}" backgroundColor="{getStyle('chromeColor')}" maxWidth="{appWidth}">
					<s:VGroup gap="0" height="100%" width="100%" horizontalAlign="center" verticalAlign="middle" maxWidth="{appWidth}">
						<s:DataGrid id="relatesGrid" height="100%" width="100%"
									horizontalScrollPolicy="auto"
                                    gridClick="rclickRow(event)"
									rollOut="highLightSel(event)"
									rollOver="unhighLightSel(event)"
									contentBackgroundAlpha="{getStyle('styleAlpha')}"
									contentBackgroundColor="{getStyle('chromeColor')}"
									alternatingRowColors="{[getStyle('chromeColor'),getStyle('chromeColor')]}"
									updateComplete="dataGridResizeHandler(event)"
									resize="dataGridResizeHandler(event)"/>
						<s:HGroup verticalAlign="middle" paddingLeft="4" paddingTop="3" paddingBottom="3" paddingRight="30" horizontalAlign="right" height="34" width="100%"
								  visible="{_renableExport || rsumVisible || _renablePrint}" includeInLayout="{_renableExport || rsumVisible || _renablePrint}">
							<s:Label id="rlblSum" text="{_rlabelSum}" visible="{rsumVisible}" includeInLayout="{rsumVisible}"/>
							<s:TextArea id="rtaSum" heightInLines="1" editable="false" borderVisible="false" visible="{rsumVisible}" includeInLayout="{rsumVisible}"/>
							<s:RadioButton label="{_exp2csvBtnLbl}" groupName="roptiongroup" selected="true" visible="{_renableExport}" includeInLayout="{_renableExport}"/>
							<s:RadioButton label="{_exp2txtBtnLbl}" groupName="roptiongroup" visible="{_renableExport}" includeInLayout="{_renableExport}"/>
							<s:Button id="rExport" height="24" label="{_exportButtonLbl}"  click="rexportTo(event)" skinClass="widgets.eSearch.skins.ExportButtonSkin" visible="{_renableExport}" includeInLayout="{_renableExport}"/>
							<s:Button id="rPrintDDGBtn" height="24" label="{getDefaultString('printSubmitLabel')}" click="rPrintDDGBtn_clickHandler(event)" skinClass="widgets.eSearch.skins.PrintButtonSkin" visible="{_renablePrint}" includeInLayout="{_renablePrint}"/>
						</s:HGroup>
					</s:VGroup>
				</s:SkinnableContainer>
			</s:NavigatorContent>
		</mx:ViewStack>
	</s:VGroup>
</viewer:BaseWidget>